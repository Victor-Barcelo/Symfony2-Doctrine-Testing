<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Category;
use AppBundle\Entity\Service;


/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
    public function CreateService($serviceName, $price = 0, $longitude = '', $latitude = '', $datetime = 0)
    {
        $service = new Service();
        $service->setName($serviceName);
        $service->setPrice($price);
        $service->setLongitude($longitude);
        $service->setLatitude($latitude);
        $service->setDatetime($datetime);
        $service->setCategory(null);

        $em = $this->getEntityManager();
        $em->persist($service);
        $em->flush();
        return $service->getId();
    }

    public function CreateCategory($categoryName)
    {
        if ($this->IsCategoryNameInDB($categoryName)) {
            return false;
        }
        $category = new Category();
        $category->setName($categoryName);
        $em = $this->getEntityManager();
        $em->persist($category);
        $em->flush();
        return $category->getId();
    }

    private function IsCategoryNameInDB($categoryName)
    {
        $repository = $this->getEntityManager()->getRepository('AppBundle:Category');
        $category = $repository->findOneBy(
            array('name' => $categoryName)
        );
        if (count($category) > 0) {
            return true;
        } else {
            return false;
        }
    }

    public function AssignCategoryToService($serviceId, $categoryId)
    {
        $em = $this->getEntityManager();
        $service = $em->getRepository('AppBundle:Service')->find($serviceId);
        $category = $em->getRepository('AppBundle:Category')->find($categoryId);
        $service->setCategory($category);
        $category->addService($service);
        $em->persist($service);
        $em->persist($category);
        $em->flush();
    }

    public function TruncateTable($tableName)
    {
        $em = $this->getEntityManager();

        $sql = 'SET FOREIGN_KEY_CHECKS = 0;';
        $connection = $em->getConnection();
        $stmt = $connection->prepare($sql);
        $stmt->execute();
        $stmt->closeCursor();

        $sql = 'TRUNCATE TABLE ' . $tableName .';';
        $connection = $em->getConnection();
        $stmt = $connection->prepare($sql);
        $stmt->execute();
        $stmt->closeCursor();

        $sql = 'SET FOREIGN_KEY_CHECKS = 1;';
        $connection = $em->getConnection();
        $stmt = $connection->prepare($sql);
        $stmt->execute();
        $stmt->closeCursor();
    }

    public function IsTableEmpty($tableName)
    {

    }
}
